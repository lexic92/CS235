package cs235.hash;

import java.util.Collection;
import java.util.Map;
import java.util.Set;

public class MapImpl implements java.util.Map{
	private Set s;
	private int size;
	/**
	 * Construct a MapImpl.
	 */
	MapImpl(){
		s = new SetImpl();
		
	}
	
	/**
	 * Removes all of the mappings from this map (optional operation).
	 *  The map will be empty after this call returns. 
	 */
	@Override
	public void clear() {
		s = new SetImpl();
		size = 0;
		
	}
	/**
	 * Returns the value to which the specified key is mapped,
	 *  or null if this map contains no mapping for the key. 
	 *  
	 *  More formally, if this map contains a mapping from a key 
	 *  k to a value v such that (key==null ? k==null : key.equals(k)),
	 *  then this method returns v; otherwise it returns null. 
	 *  (There can be at most one such mapping.) 
	 *  
	 *  @param key the key whose associated value is to be returned
	 *  @return the value to which the specified key is mapped, 
	 *    or null if this map contains no mapping for the key
	 */
	@Override
	public Object get(Object key) {
		Pair testThis = new Pair(key, null);
		Object pair = ((SetImpl)s).find(testThis);
		if(pair != null){
			return ((Pair) pair).value;
		}
		return null;
	}

	/**
	 * COMPLETED
	 * 
	 * Associates the specified value with the specified key in 
	 * this map (optional operation). If the map previously 
	 * contained a mapping for the key, the old value is
	 *  replaced by the specified value. (A map m is said 
	 *  to contain a mapping for a key k if and only if 
	 *  m.containsKey(k) would return true.) 
	 *  
	 *  @param key key with which the specified value is to be associated
	 *  @param value value to be associated with the specified key 
	 *  @return the previous value associated with key, or null if there
	 *   was no mapping for key. (A null return can also indicate that
	 *    the map previously associated null with key, if the
	 *     implementation supports null values.) 
	 */
	@Override
	public Object put(Object key, Object value) {
		Pair putThis = new Pair(key, value);
		Object previousPair = ((SetImpl) s).find(putThis);
		
		s.add(putThis); //Only works if it is the same key.
		if(previousPair != null){
			size++;
			return ((Pair) previousPair).value;
		}
		size++;
		return null;
	}

	/**ious value associated with key, or null 
	 * if there was no mapping for key.
	 * COMPLETED
	 * 
	 * Removes the mapping for a key from this map if it is present 
	 * (optional operation). More formally, if this map contains a
	 *  mapping from key k to value v such that (key==null ? k==null
	 *   : key.equals(k)), that mapping is removed. (The map can 
	 *   contain at most one such mapping.)
	 *   
     * Returns the value to which this map previously associated the key,
     *  or null if the map contained no mapping for the key.
     *  
	 * If this map permits null values, then a return value of null does
	 *  not necessarily indicate that the map contained no mapping for 
	 *  the key; it's also possible that the map explicitly mapped the 
	 *  key to null.
	 *  
	 * The map will not contain a mapping for the specified key once 
	 * the call returns. 
	 * 
	 * @param key key whose mapping is to be removed from the map 
	 * @return the previous value associated with key, or null 
	 * if there was no mapping for key.  
	 */
	@Override
	public Object remove(Object key) {
		Pair arbitraryPair = new Pair(key, null);
		Object previousPair = ((SetImpl) s).find(arbitraryPair);
		
		s.remove(previousPair); //Only works if it is the same key.
		
		if(previousPair != null){
			size--;
			return ((Pair) previousPair).value;
		}
		//This means the map contained no mapping for the key, so don't
		//decrement the size.
		return null;
	}

	
	/**
	 * Returns the number of key-value mappings in this map. If the map 
	 * contains more than Integer.MAX_VALUE elements, returns 
	 * Integer.MAX_VALUE. 
	 * 
	 * @return the number of key-value mappings in this map.
	 */
	@Override
	public int size() {
		// TODO Auto-generated method stub
		return size;
	}

	
	
	
	
	
	
	
	
	
	
	@Override	// TODO Auto-generated method stub
	public boolean isEmpty() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException();
	}

	@Override
	public boolean containsKey(Object key) {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException();
	}

	@Override
	public boolean containsValue(Object value) {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException();
	}

	@Override
	public void putAll(Map m) {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException();
	}

	@Override
	public Set keySet() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException();
	}

	@Override
	public Collection values() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException();
	}

	@Override
	public Set entrySet() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException();
	}
	
	
	
	
	
	//Inner class
	public class Pair {
		private Object key;
		private Object value;
	
		Pair(Object key, Object value){
			this.key = key;
			this.value = value;
		}
		
		/**
		 * Indicates whether some other object is "equal to" this one.
		 * Assume that the set will only be comparing Pairs.
		 */
		public boolean equals(Object o){
			//If this pair's key equals what it's comparing to,
			//then it's equal.
			return key.equals(((Pair)o).getKey());
		}
		/**
		 * These hash codes are based on the key.
		 */
		public int hashCode(){
			return key.hashCode();
		}
		public Object getKey(){
			return key;
		}public Object getvalue(){
			return value;
		}
	
	
	}


}
